Developing Stu
==============

This is information for hacking Stu itself.

'TODO.stu' lists the next features to be implemented.

'UNIMPLEMENTED.stu' lists things we're unlikely to implement.

'CODING' gives the coding standards used in Stu.

==== SETUP ====

For development, use 'make test'.

Before pushing changes:
* Increment the version number in VERSION
* Run 'make test' successfully

Version logic (see 'NEWS' for an explanation of version numbers):
* Increment the patch version number for any changes
* Increment the minor version number when backward-compatible new syntax
  is introduced
* Increment the major version number when backward-incompatible new
  syntax is introduced (which we try to avoid)

==== DEBUG VERSION ====

The file 'bin/stu.debug' is the Stu executable with all debugging turned on,
i.e., with debugging symbols, all warnings enabled, etc.  The exact
flags for compiling this are set in the Makefile, and you might have
to tweak these flags if you are developing Stu on another setup than the
authors'.

==== UNIT TESTS ====

Unit testing is described in 'sh/test'.

The command 'make test' will also execute all unit tests.  This takes about
ten minutes.

When we add new functionality, we always add unit tests for it, covering
both success and failure.

If you run the tests and they fail, report that to Jérôme Kunegis
<kunegis@gmail.com>.

==== REQUIREMENTS ====

Running 'make test' has more requirements than just compiling Stu:
* The unit tests assume that the file system supports UTF-8 filenames.
  Stu will work without such a file system, but you can't run the unit
  tests unless you remove the offending tests (tests/1-unicode-*/).
* You need to install the package 'expect'.  On some systems, also 'tclsh'.
  (Exact packages vary by operating system.)  (Only used by sh/tty.)

Running 'make cov' has the following requirements:
* lcov
