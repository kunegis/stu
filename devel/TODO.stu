#
# Running sh/mktest in the terminal:  green success text is followed by previous white text
#

#
# gcc -fanalyzer
#

#
# Compilation mode like ndebug but non-stripped.  Check output of nm.
#

#
# Achieve full coverage.
#
# * Exclude unreachable() blocks from counting
# * Exclude should_not_happen() blocks from counting
# * Investigate why dome descructors have multiple copies, not all of which are used
#

#
# Test very long line length; very large number of dependencies; very large
# number of dependencies in a dynamic dependency.
#

#
# Check for Stu source code files that don't end in newline (except for empty files).
#

#
# File_Executor::executor() and Dynamic_Executor::execute() are very similar.
# Refactor to only have the common bits in the subclasses of Executor.
#

#
# Manpage:  the synopsis should show all "top-level" options, i.e., options that
# change the overall behavior of Stu, such as -q/-P/-I.
#

#
# Put all the option parsing stuff from main() into its own function in options.hh.
#

#
# Maybe:  merge Style and Rendering into a single bitmask.
#

#
# TRACE_FUNCTION: have optional parameter(s) to pass arguments of the function, instead of
# outputting them on a separate line.
#

#
# Have flags +p +o +t that negative -p -o -t (useful when flags can be put on
# the target side of rules).
#

#
# Mark this target to always be a persistent dependency
#

-p data: { mkdir data ; }

# Alternatively, we may introduce the rule that for directories, the
# modification date is not used.  (Not a good idea because the date may
# be useful for directories in some cases.)  (Would also not be
# backward-compatible.)

# This can also work with other flags.

#
# Allow to handle symlinks as files in themselves, i.e., check for their
# own existence and their own timestamp.  This should not be the default
# as the current behaviour is more often useful, but should be available
# as a possibility, probably using a new flag (-L).
#

# What happens if the same target is used with and without "-L"?
A: B C {...}
B { ln -s ... B ; }
C:  -L { ln -s ... B ; }
# (this examples is incorrect)

#
# Make '~' work as the home directory.  Also for ~user/.  '~' is already
# forbidden as the first character in unquoted names.  Needs a new type for
# unparsed targets.
#

#
# Allow access to environment variables via e.g. $(HOME).  Using this is
# likely to be an antipattern -- the idiomatic thing to do is set a
# symlink to the directory in question.  Other cases are even worse,
# e.g., having environment variables with lists of things in them.
#
# On the other hand, this will be useful after extended inclusion is
# implemented, to pass paths to Stu libraries.
#

#
# File import
#

# Import all rules from subdirectory; will prepend the directory name to
# all targets.  Rules from there will be executed from within the
# directory as current directory.  If using 'import', the meaning of
# all these are equivalent:
% import src/main.stu
% import src/
% import src
% include -d src/main.stu
% include -d src/
% include -d src
# The flag -d can be something else.

# - What about transient targets imported in that way.  Do we
#   prepend a directory to them?
%import dir   # contains:   @all:  ...;
# gets converted to:       @dir/all:  ...;
# or to:                   dir/@all:  ...;  # ???

#
# When doing %include or %import, allow to pass environment variables.
#

#
# Does it make sense to have a way to set environment variables for all
# commands?  It would open us up to many additional questions, and
# potentially some Make-like anti-patterns.  In general, Stu directives
# are prone to implement anti-patterns, as what they do is global.
#

% set PATH /usr/local/bin
% unset PATH

#
# Test make install using Docker.
#

#
# sh/tty:  Also test the case where stdout is a tty and stderr is not, and vice
# versa.
#

#
# Try out further sanitizers (some may need a newer GCC)
#    -fsanitize=address // not used because of false positives (due to Execution caching)
#    -fsanitize=leak    // (Execution caching)
#    <others>
#

#
# Add more dependencies to a target using a flag.
#

-a A : B;
# There must already be a rule for A.  The dependency B is added.

#
# Line number and file syntax:  A preprocessor-like construct that gives a new
# filename and line number, such that error messages from Stu can point
# to the original file, not the generated file.  Analogous to the
# preprocessors #line directive.  Useful in dynamic dependencies.
#

% file datasets.list
% line 120

# Use this in stu-utils/texdep and other stu-utils programs judiciously.

#
# When including files using dynamic dependencies, make a
# difference between inclusion and import, as is done for %include and
# %import.
#

A: [-d data/B];

#
# In -j>1 mode, Start trivial dependencies immediately when it is clear
# they must be started, not just when everything else is done.
#

#
# Search within predefined paths for %include ($STU_PATH or $STUPATH;
# the -I option)
#

# This is included from the "Stu path", and could be installed in
# e.g. /usr/share/stu/lib/ or ~/share/stu/lib/, etc.
% include c++.stu

#
# Have a way to set $STU_SHELL and $STU_CP from within a Stu script.
# E.g., using directives.
#

# Some Stu scripts may want to use Bash throughout
% STU_SHELL /bin/bash

# Should it be valid for the whole Stu invocation, or only for the
# source file in which it appears?

# Could also be done as
% set STU_SHELL /bin/bash

#
# A flag with the meaning "never rebuild that dependency", but only use
# it to determine whether we need to rebuilt the target.  It would mean
# that we can prune dependencies with that flag as soon as we know that
# the target must be built anyway.
#

# In this example, when 'program' does not exist, Stu will *not* build
# 'dep.sources', because the -s flag is used and Stu knows that
# 'program' has to be rebuilt anyway.  '-s' could stand for
# "secondary", and mean "we don't want this to be built, we only need it
# to determine whether we have to be rebuilt."

program:  -s [dep.sources] {
	cc ... -o program
}
dep.sources {
	# Some complex mechanism for determining the source code files
	# of the program
}

# This may be identical to
program:  [-o -p dep.sources] { ... }
# and "dep.sources" may even be a side effect of "program".

# This could be the first case where "-p -o" makes sense.  We want to allow "-po" for
# this.

#
# Have an option for: For hardcoded rules, compare the content of the file with
# the wanted content and don't update the file if identical.  Very useful when someone
# changes the content in the stu file, and then re-builds.  At the moment, it is a common
# complaint that Stu does _not_ re-build in that case.
#

#
# Regular expressions in target names.
#

list.${X:.}${Y:.} {
	compute -x $X -y $Y >list.${X}${Y}
}

# When the date is saved as contiguous digits, e.g. 'log-analysis.20180413.txt'
# for April 13, 2018, but as ISO dat in 'log-*.txt'.
log-analysis.${year:[0-9]{4}}${month:[0-9]{2}}${day:[0-9]{2}}.txt:
	log.$year-$month-$dat.txt
{ ... }

# The parameter $NETWORK must not contain a dot
web.${NETWORK:[^.]+} :  ... ;

# Specify a list of values
${NAME:ref|ukob|tuberlin}.bib:  bibs-A/${NAME}.bib
{ cp bibs-A/$NAME.bib $NAME.bib }
$NAME.bib:  bibs-B/$NAME.bib
{ cp bibs-B/$NAME.bib $NAME.bib }

# Exclude slashes
${NAME:[^/]+}.bib: ...;

# Can also be done with a pipe:
list.${name|[A-Z].*} # Matches uppercase names
# Find a good syntax based on Bash/KSH.

#
# Allow dir/@transient.  Will allow dir/(a b @c @d).
#
# a/@b is equivalent to @a/b.
#

#
# Nested rules.  Good for dependencies that are used only once.  This is
# quite hard to read, honestly, and mostly fulfills the fantasy of
# people who like deeply nested constructs :)  But implementation-wise,
# it's not that difficult.
#

A: (B: C { cp C B ; }) (D: E {cp E D ; }) { cat B D >A ; }

#
# Priority levels for rules.
#

# The second rule matches because the priority is higher.  Without the
# priorities, it would be an error because no rule dominates the other.
$x.bbb -p1:  ... { ... }
aaa.$x -p2:  ... { ... }

#
# Get Stu into Debian.
# * https://www.debian.org/devel/wnpp/
# * https://wiki.debian.org/DebianMentorsFaq#How_do_I_make_my_first_package.3F
# * https://www.debian.org/doc/manuals/developers-reference/pkgs.html#newpackage
# * https://wiki.debian.org/Teams/DebianCliAppsTeam
# * https://wiki.debian.org/Teams/DebianMonoGroup/NewPackage
#

#
# Check if we can provide a Flathub package.
#

#
# A flag:  A dependency may fail.
#

A: -e B
{
	# B has been built, but the building may have failed.
}

#
# Flag to suppress output for a rule.  (-s presumably).
#

#
# Try -fhardened.
#

#
# Try -fvisibility=hidden
#

#
# Try -fstack-protector[-all]
#

#
# Deprecate the -d option.
#

#
# Tests for long-trivial that fail because the -t flag is not passed through transient
# targets, but should.
#

A: @x { touch A ; }  @x: -t C;
A: @x { touch A ; }  @x: [-t B]; B={C}
A: @x { touch A ; }  @x: -t [B]; B={C}
A: @x { touch A ; }  @x: [B]; B = {-t C}

#
# Combining -n/-t and -o
#

A: [ -n -o B ] { touch A ; }  B={C}
A: [ -t -o B ] { touch A ; }  B={C}

#
# Test installing the auto-generated .deb from Github.
#

#
# Dep and other classes:  use std::enable_shared_from_this and turn static functions into
# member functions.  Some functions such as Dep::clone() should be member functions but
# are static at the moment because we need to transform THIS into a shared_ptr.
#
