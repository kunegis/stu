Developing Stu
==============

This is information for hacking Stu itself.

'TODO.stu' lists the next features to be implemented.

'UNIMPLEMENTED.stu' lists things we are not planning to implement at the moment.

'CODING' gives the coding standards used in Stu.

== SETUP ==

For development, use 'make test' (it works only with GCC).

Before pushing changes:
* Increment the version number in VERSION
* Run 'make test' successfully
* Run 'make cov' and check that no new uncovered lines were added (one day we'll require
  100% coverage)
* Squash the commits

Version logic (see 'NEWS' for an explanation of version numbers):
* Increment the patch version number for any changes
* Increment the minor version number when backward-compatible new syntax is introduced
* Increment the major version number when backward-incompatible new syntax is introduced
  (which we try to avoid)

== DEBUG VERSION ==

The file 'bin/stu.debug' is the Stu executable with all debugging turned on, i.e., with
debugging symbols, all warnings enabled, etc.  The exact flags for compiling this are set
in the Makefile, and you might have to tweak these flags if you are developing Stu on
another setup than the authors'.

The debug version enables tracing, which is very useful for debugging; see src/trace.hh.

== UNIT TESTS ==

Unit testing is described in 'sh/test'.

The command 'make test' will also execute all unit tests, as well as sanitizer tests.
This takes about fifteen minutes.

When using another compiler than GCC, you can use 'make check' instead, which disables
warnings and doesn't run code cleanliness tests.  But when contributing to Stu, please run
'make test'.

When we add new functionality, we always add unit tests for it, covering both success and
failure.

If you run the tests and they fail, report that to Jérôme Kunegis <kunegis@gmail.com>.

== REQUIREMENTS ==

Running 'make check' has more requirements than just compiling Stu:
* The unit tests assume that the file system supports UTF-8 filenames.  Stu will work
  without such a file system, but you can't run the unit tests unless you remove the
  offending tests (tests/1-unicode-*/).
* LD_PRELOAD must work

Running 'make test' has the following additional requirements:
* -fsanitize=undefined must work

Running 'make cov' has the following requirements:
* lcov
