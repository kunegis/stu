#! /bin/sh
#
# Perform all unit tests.  Each unit test is in one subdirectory of the
# directory test/.  By default, each test directory contains a file
# 'main.stu' that performs one unit test.  Additional files may be
# present to configure how the test is performed; see below.
# 
# INVOCATION
#
#	$0 [TEST]...
#
# Without any arguments, perform all tests.  With one or more arguments,
# perform the given tests.  The given test names are the names of the
# subdirectories of test/, and may or may not include the 'test/'
# prefix.  The arguments may contain glob patterns.  (No test names
# contain the glob characters *, ?, etc.) 
#
# OUTPUT FILES
#     error.log		List of tests that failed, one name per line
#
# PARAMETERS
#     $NDEBUG	Set to non-empty to test the nondebug version; by default
#		the debug version is tested 
#     $VARIANT  Other variant of the compiled file; the default is to
#		take the file that matches the value of $NDEBUG
#     $verbose  Set to non-empty for verbose output 
#     $notall	If non-empty, exit on the first error, instead of
#		running everything  
#     $emptyok	Set to non-empty to *not* output an error for empty test
#               directories; useful after doing "rm" in a version
#		control system on one, since that leaves a directory
#		containing only (e.g.) ".svn".  Ignores dotfiles. 
#
# EXIT STATUS 
#     0		All tests succeeded
#     1		At least one test failed
#     2		Internal error 
#
# TEST SPECIFICATION 
#
# Each subdirectory of test/ contains one unit test, which follows the
# following rules: 
#
# * Each test contains a Stu file 'main.stu' that is to be tested
# * It must build the file 'A' by default (i.e., that should be the
#   first target)
# * All built files must have names that correspond to the pattern given
#   in sh/rm_tmps, such that they are removed automatically
#   after the test.  Most generated files' names just consist of a
#   single uppercase letter (but they don't have to).
# * There may be other files present used by the test; these are part of
#   the Stu release, i.e., they are under version control. 
#
# SPECIFICATION FILES
#
# Each of these files can be placed in the individual test directory to
# enable additional checks or behaviors.  All of these files are optional. 
#
# TARGET       The name of the target that is built in the test, instead
#              of the default 'A'.  This does not change the invocation:
#              Stu is invoked without arguments by default.  It only
#              changes the check that the file was built, and its
#              content.   May be an empty file to omit testing for an
#	       existing target.  
# CMD          Additional command arguments passed to Stu.  Content may
#  	       use shell quoting and escaping.  For instance, the file
#	       may contain -C ' A ' to pass an argument beginning and ending
#              in space to Stu. 
# CMDPREFIX    Prefix before command.  Used to set environment variables. 
# PARALLEL     Give the arguments of the -j option for which the test is
#              to be executed 
# EXITSTATUS   The prescribed exit status; default is zero
# NOSECOND     If file is present, do not check that second invocation
#              results in "Targets are up to date" (A second run is only
#	       made if the prescribed exit status is not zero.)
# NOTTY	       Don't do the extra TTY test (e.g., when the -q option is
#	       used and the exit status is expected to be one)
# NOCOLOR      Don't test for color in stderr (e.g., with the -y option)
# CONTENT      Prescribe the exact content of the built file
# INCONTENT    Prescribe strings that must appear in the built file 
# STDOUT       The exact output of Stu
# STDERR       The exact error output of Stu
# INSTDOUT     Prescribe strings that must appear in Stu's output
# INSTDERR     Prescribe strings that must appear in Stu's error output
# NOTINSTDERR  A text that must not be present in Stu's error output
# TTYSTDOUTERR The output and error output (interleaved) when in TTY mode
# EXEC         Can be an alternative test script; it can do anything and
#              should return a sensible exit status (i.e., 0 on success,
#              nonzero otherwise).  It should also behave like sh/mktest,
#              e.g., output '***' only on error, etc.
#
# For the files beginning with 'IN', each line contains a string that
# must be present, in any order. 
#
# NAMES OF TESTS
#
# The names of unit tests, i.e., the name of the directories under test/
# follow a pattern:
#
# * test/VERSION-ID
#	These are tests for features introduced in Stu version VERSION.
#	This was introduced in Stu 2.5, and therefore the assignment of
#	VERSION numbers for older versions is approximate.  The goal is
#	to be able to run all tests in asciibetical order so as to test
#	older features first.  Presumably, these are the features that
#	should be fixed first when working on Stu.
# * test/NAME-ID
#	These are tests for the feature named NAME, with ID being an
#	integer.  Ideally, these would be migrated to the VERSION-ID
# 	scheme.  
# * test/long-NAME
#	These are tests that take a long time to run.  I.e., at least
#       one second, due to sleep being used.  We try to avoid this as
#  	much as possible, but sometimes sleeping is the only way to test
# 	something. 
#
# NOTES
#
# * Some tests that use EXEC need to sleep, in order to make sure that
#   timestamps e.g. of a created file is older than Stu invocation.
#   Usually, these scripts use "sleep 2", i.e., sleep for two seconds to
#   make sure that there is a difference in timestamps of at least one
#   second on systems where file modification times have a precision of
#   only one second.  An alternative is to use sh/touch_old. 
# * Tests output '***' only in case of error.  This is convenient for
#   grepping while the tests are running.
# * Tests use 'diff' to compare files, not 'cmp'. 
#
# TODO
#
# * First, execute all tests without 'EXEC', and then all tests with
#   'EXEC'.  
# * For each test, interrupt the test after a specified timeout, to
#   avoid that the whole testing procedure hangs when a single test
#   hangs. 
#

# Note:  we can't use "set -e" here (which is a good general practice in
# shell scripts), because otherwise we can't use $? to check the exit
# code of Stu.  

# Set to "1" on error 
errors=0

exec 6>error.log

time_begin=$(sh/now)

rm -f stu.test
if [ "$VARIANT" ] ; then
	ln -s stu."$VARIANT" stu.test
else 
	if [ "$NDEBUG" ] ; then
		ln -s stu stu.test
	else
		ln -s stu.debug stu.test
	fi
fi

unset STU_OPTIONS

cd test

if [ "$1" ] ; then
	tests="$@"
else
	# Note:  At some point there might be too many tests, but we don't
	# want to use ls -1 | { ... } because that would make it impossible
	# to do "error=1", as setting the variable $error in a subshell
	# would have no effect. 
	tests=$(echo *)
fi

count_total=0

# In the next line, '$tests' expands with glob replacement 
for file in $tests
do
	# Whether there is an error in this test 
	error=0
	
	count_total=$(( count_total + 1 ))

	# Remove optional 'test/' prefix
	file=$(echo "$file" | sed -e 's,^test/,,')

	if [ ! -d "$file" ]; then
		echo >&2 "$0: *** '$file' is not a directory"
		errors=1
		echo "$file" >&6
		continue
	fi

	# There are no files in the test directory (ignoring dotfiles) 
	if [ "$(echo $(ls -1 "$file" | wc -l))" = 0 ] ; then
		if [ "$emptyok" != 1 ] ; then
			echo >&2 "$0: *** Test directory $file/ does not contain any files"
			errors=1
			echo "$file" >&6
			continue;
		fi
	fi

	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo cd "$file"
	cd "$file"

	../../sh/rm_tmps || exit 2

	# Check that all all-uppercase files are of one of the allowed files 
	allowed=",EXITSTATUS,PARALLEL,INSTDOUT,INSTDERR,NOTINSTDERR,STDERR,TTYSTDOUTERR,CMD,CMDPREFIX,TARGET,INCONTENT,CONTENT,EXEC,STDOUT,NOSECOND,NOTTY,NOCOLOR,"
	for otherfile in $(ls -1 | sed -e '/^[A-Z]*$/!d')
	do
		if expr "$allowed" : ".*,$otherfile,.*" >/dev/null ; then continue ; fi
		echo >&2 "$0: *** Invalid file '$otherfile' in test directory"
		error=1
	done

	CMD=
	if [ -r CMD ]; then
    		CMD=$(sed -e '/^[[:space:]]*$/d' <CMD)
	fi
	CMDPREFIX=
	if [ -r CMDPREFIX ]; then
    		CMDPREFIX=$(sed -e '/^[[:space:]]*$/d' <CMDPREFIX)
	fi

	# The following will save:  list.def.out and list.def.err 

	if [ -r EXEC ]; then

		if [ -r EXITSTATUS -o -r PARALLEL -o -r INSTDOUT -o -r INSTDERR \
			-o -r STDERR -o -r NOTINSTDERR -o -r CMD -o -r CMDPREFIX \
			-o -r TARGET -o -r INCONTENT -o -r CONTENT \
			-o -r STDOUT -o -r NOSECOND -o -r NOTTY -o -r TTYSTDOUTERR -o -r NOCOLOR ]; then
			echo >&2 "$0: *** EXEC does not allow any other file"
			errors=1
			echo "$file" >&6
			continue
		fi

		echo >&2 ./EXEC
		./EXEC
		if [ "$?" != 0 ]; then
			echo >&2 "$0: *** EXEC failed"
			error=1
		fi

	else
		# Execute command
		echo $CMDPREFIX ../../stu.test "$CMD"
		eval $CMDPREFIX ../../stu.test $CMD \>list.def.out 2\>list.def.err
		exitstatus_actual=$?

		if [ "$verbose" ] ; then
			echo stdout:
			echo _______
			cat list.def.out
			echo _______
			echo stderr:
			echo _______
			cat list.def.err
			echo _______
		fi
		
		# Exit status
		exitstatus_correct=0
		if [ -r EXITSTATUS ]; then
			[ 1 = "$(echo $(grep -E '[^[:space:]]' EXITSTATUS | wc -l))" ] || {
				echo >&2 "*** Expected EXITSTATUS to contain a single non-empty line, not:"
				cat  >&2 EXITSTATUS
				echo >&2 __________
				exit 2
			}
			grep -v -E '^(\s*|\s*[0-9]+\s*)$' EXITSTATUS && {
				echo >&2 "*** Expected EXITSTATUS to contain a number, not:"
				cat  >&2 EXITSTATUS
				echo >&2 __________
				exit 2
			}
			exitstatus_correct=$(sed -e '/^[[:space:]]*$/d;s/[[:space:]]\{1,\}//g' <EXITSTATUS)
			if [ "$exitstatus_correct" = 0 ]; then
				echo >&2 "$0: *** Content of EXITSTATUS should not be zero"
				error=1
			fi
		fi
		if [ "$exitstatus_actual" != "$exitstatus_correct" ]; then
			echo >&2 "$0: *** Test '$file' should have returned $exitstatus_correct, but returned $exitstatus_actual"
			echo >&2 list.def.out:
			echo >&2 ______________
			cat >&2 list.def.out
			echo >&2 ______________
			echo >&2 list.def.err:
			echo >&2 ______________
			cat >&2 list.def.err
			echo >&2 ______________
			error=1
		else
			echo "EXITSTATUS...$exitstatus_correct correct"
		fi

		# Target was built or not generate in case of error
		if [ "$exitstatus_correct" = 0 ]; then
			target=A
			if [ -r TARGET ]; then
				# Remove empty lines but do not alter non-empty lines
				target=$(sed -e '/^[[:space:]]*$/d' <TARGET)
			fi
			if [ -n "$target" ] ; then
				if [ ! -r "$target" ]; then  # The main target must have been built
					echo >&2 "$0: *** Target '$target' was not built"
					error=1
				else
					# Check that INCONTENT is found in the built file
					if [ -r INCONTENT ]; then
						if fgrep -q -- "$(cat INCONTENT)" "$target" ; then
							echo "INCONTENT...correct"
						else
							echo >&2 "$0: *** '$(cat INCONTENT)' must appear in generated file"
							echo >&2 "$target:"
							echo >&2 ____
							cat "$target"
							echo >&2 ____
							error=1
						fi
					fi
				
					# Check exact content of the target file
					if [ -r CONTENT ] ; then
						if diff "$target" CONTENT ; then
							echo "CONTENT...correct"
						else	
							echo >&2 "$0: *** CONTENT error"
							error=1
						fi
					fi
				fi
			else
				if [ -r INCONTENT ] || [ -r CONTENT ] ; then
					echo >&2 "$0: *** CONTENT and INCONTENT must not appear in conjunction with an empty TARGET"
					error=1
				fi
			fi
		else
			# Make sure the file "A" was not generated
			if [ -r A ]; then
				echo >&2 "$0: *** File 'A' was generated although the script failed"
				error=1
			fi
		fi

		# Check that standard output is correct
		if [ -r STDOUT ] ; then
			diff list.def.out STDOUT
			exitstatus=$?
			if [ "$exitstatus" != 0 ] ; then
				echo >&2 "$0: *** output does not match 'STDOUT'"
				echo >&2 '_____ actual output:'
				cat list.def.out
				echo >&2 _____
				wc -l list.def.out STDOUT
				ls -l list.def.out STDOUT
				error=1
			else
				echo "STDOUT...correct"
			fi
		fi

		# Check that INSTDOUT is found in the output
		if [ -r INSTDOUT ]; then
			if  grep <list.def.out -qF -- "$(cat INSTDOUT)" ; then
				echo "INSTDOUT...correct"
			else
				echo >&2 "$0: *** '$(cat INSTDOUT)' was not found in output"
				echo >&2 ____ stdout:
				cat >&2 list.def.out
				echo >&2 ____
				error=1
			fi
		fi

		# Check that at least one line of error message is generated 
		if [ "$exitstatus_correct" != 0 ] && [ \! -r STDERR ]; then
			if [ \! \( "$(echo $(cat list.def.err | wc -l))" -gt 0 \) ]; then
				echo >&2 "$0: *** Nothing written to stderr although exit status is >0"
				error=1
			fi
		fi

		# Check that INSTDERR is found in the error output
		if [ -r INSTDERR ]; then
			for lineno in $(seq 1 $(awk '{x++}END{ print x}' <INSTDERR)) ; do
			   	line=$(<INSTDERR sed -e "$lineno"'!d')
				if grep <list.def.err -qF -- "$line" ; then
					echo "INSTDERR...correct"
				else
					echo >&2 "$0: *** '$line' was not found in error output"
					echo >&2 "stderr:"
					echo >&2 ______
					cat >&2 list.def.err
					echo >&2 ______
					error=1
				fi
			done
		fi

		# Check that STDERR matches the error output exactly 
		if [ -r STDERR ]; then
			diff list.def.err STDERR
			exitstatus=$?
			if [ "$exitstatus" != 0 ]; then
				echo >&2 "$0: *** error output does not match 'STDERR'"
				echo >&2 '_____ actual error output:'
				cat list.def.err
				echo >&2 _____
				wc -l list.def.err STDERR
				ls -l list.def.err STDERR
				error=1
			else
				echo "STDERR...correct"
			fi
		fi

		# Check that NOTINSTDERR is not found in the error output
		if [ -r NOTINSTDERR ]; then
			if fgrep <list.def.err -q -- "$(cat NOTINSTDERR)" ; then
				echo >&2 "$0: *** '$(cat NOTINSTDERR)' was found in error output, but should not be there"
				error=1
			else
				echo "NOTINSTDERR...correct"
			fi
		fi

		# TTYSTDOUTERR
		if { [ -r TTYSTDOUTERR ] || [ -r EXITSTATUS ]; } && ! [ -r NOTTY ]; then
			../../sh/rm_tmps || exit 1
			echo $CMDPREFIX ../../stu.test "$CMD" '[TTY]'
			eval $CMDPREFIX ../../sh/tty ../../stu.test $CMD \>list.def.out 
			exitstatus_actual=$?

			# Exit code
			if [ "$exitstatus_actual" != "$exitstatus_correct" ]; then
				echo >&2 "$0: *** Test '$file' should have returned $exitstatus_correct, but returned $exitstatus_actual [TTY]"
				error=1
			else
				echo "EXITSTATUS:TTY...$exitstatus_correct correct"
			fi

			# correct output
			if [ -r TTYSTDOUTERR ]; then
				diff list.def.out TTYSTDOUTERR
				exitstatus=$?
				if [ "$exitstatus" != 0 ]; then
					echo >&2 "$0: *** TTY error output does not match 'TTYSTDOUTERR'"
					echo >&2 '_____ actual output:'
					cat list.def.out
					echo >&2 _____
					wc -l list.def.out TTYSTDOUTERR
					ls -l list.def.out TTYSTDOUTERR
					error=1
				else
					echo "TTYSTDOUTERR...correct"
				fi
			fi

			# There is color
			if [ -r EXITSTATUS ] && ! [ -r NOCOLOR ] ; then
				if ! grep -qE '' list.def.out ; then
					echo >&2 "$0: *** Expected ESC in TTY output because EXITSTATUS exists"
					echo >&2 output:
					echo >&2 _________
					cat >&2 list.def.out
					echo >&2 _________
					error=1
				else
					echo "TTY:COLOR...correct"
				fi
				
			fi

			# No unbalanced colors
			if grep -qE '[^0]+m[^]*$' list.def.out ; then
				# The following is disabled, as we now
				# allow a color code to be replaced by
				# another one directly: 
				#      grep -qE '[^0]+m[^]*[^0]+m' list.def.out 
				echo >&2 "$0: *** Expected closing color code"
				error=1
			else
				echo "TTY:BALANCED...correct"
			fi
		fi

		# Second invocation does nothing 
		if [ "$exitstatus_correct" = 0 ] && [ ! -e NOSECOND ]; then
			echo $CMDPREFIX ../../stu.test "$CMD"
			eval $CMDPREFIX ../../stu.test $CMD \>list.def.out 2\>list.def.err 
			grep -qF 'Targets are up to date' list.def.out 
			if [ "$?" = 0 ] ; then
				echo "Second invocation...correct"
			else
				echo >&2 "$0: *** Second invocation did no result in 'Targets are up to date'"
				echo >&2 STDOUT:
				echo >&2 _____
				cat >&2 list.def.out
				echo >&2 _____
				error=1
			fi
		fi

		# Run in parallel 
		if [ -r PARALLEL ]; then
			ks=$(sed -e '/^[[:space:]]*$/d' <PARALLEL)
			for k in $ks; do
				../../sh/rm_tmps || exit 2
				echo $CMDPREFIX ../../stu.test "$CMD" -j "$k"
				eval $CMDPREFIX ../../stu.test $CMD -j $k \>list.def.out 2\>list.def.err
				if [ $? != 0 ]
				then
					echo >&2 "$0: *** Parallel stu failed for '$file' with k = $k"
					error=1
				else
					echo "PARALLEL...correct"
				fi
			done
		fi	
	fi	

	../../sh/rm_tmps || exit 2
	cd ..

	if [ "$error" != 0 ] ; then
		echo "$file" >&6
		errors=1
		[ -n "$notall" ] && { 
			echo >&2 "[31m$0: *** Test '$file' failed [notall][m"
			exit 1 
		}
	fi
done

echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
cd ..

time_end=$(sh/now)
time_diff=$(expr $time_end - $time_begin)
runtime=$(printf '%u:%02u\n' "$(expr $time_diff / 60)" "$(expr $time_diff % 60)")
echo "Runtime:  $runtime"

if [ "$errors" != 0 ]
then
	count_failed=$(echo $(<error.log wc -l))
	success_rate=$(awk 'BEGIN{printf "%.2f\n", 100*('"$count_total"'-'"$count_failed"')/'"$count_total"'}')
	echo >&2 "[31m$0: *** ${success_rate}% success rate.  The following $count_failed test(s) failed (out of $count_total):"
	cat error.log
	printf "[m"
	exit 1
else
	echo "[32mTests successful[m"
	if [ -z "$1" ] && [ -z "$VARIANT" ] && [ "$NDEBUG" ] ; then
		echo >>test.runtime "$(date +%Y-%m-%dT%H:%M:%S) $(printf %s "$(cat VERSION)") $runtime" 
	fi
	exit 0
fi
