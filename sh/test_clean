#! /bin/sh

error_file=${TMP:-/tmp}/test_clean.$$.error
rm -f -- "$error_file"
trap clean EXIT
# Functions report errors by returning non-zero OR by touching $error_file

find_source_files()
{
	find . -type f |
		grep -v -E -e '~$' -e '^\./(bin|cov|tests|log|.git)/' -e '^\./man/stu\.1$'
	find tests -name EXEC -o -name PRELOAD.cc
}

check_test_own_name()
{
	ls -1U tests | while IFS= read -r test ; do
		grep -r -F -n -e "$test" "tests/$test" |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Source code of test must not contain name of directory in order for directories in tests/ to be renamable,' |
		grep -E '.' >&2 && touch -- "$error_file"
	done
	return 0
}

clean()
{
	rm -f -- "$error_file"
}

check_newline_eof()
{
	find_source_files | {
		my_ret=0
		while read file ; do
			[ -s "$file" ] || continue
			has_newline_eof=$(echo $(tail -c-1 -- "$file" | wc -l))
			if [ "$has_newline_eof" = 0 ] ; then
				echo >&2 "$file:$((1 + $(wc -l <"$file"))): newline missing at end of file"
				my_ret=1
			fi
		done
		return "$my_ret"
	}
}

check_space_file()
{
	find_source_files | {
		my_ret=0
		while read file ; do
			head -n 1 -- "$file" | grep -q -E '^\s*$' && {
				echo >&2 "$file:1: File must not begin with empty line"
				my_ret=1
			}
			tail -n 1 -- "$file" | grep -q -E '^\s*$' && {
				echo >&2 "$file:$(echo $(wc -l <"$file")): File must not end with empty line"
				my_ret=1
			}
		done
		return "$my_ret"
	}
}

check_space_line()
{
	find_source_files |
		xargs grep -E -n '\s$' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Line must not end in space,' |
		grep -E '.' >&2 && return 1
	return 0
}

check_double_empty_line()
{
	find_source_files |
	xargs awk '
BEGIN {
	previ= "x";
}
/^$/ {
	if (previ == "") {
		print FILENAME ":" (FNR-1) ": Multiple empty lines should not be present";
	};
	previ= "";
}
/./ {
	previ= "x";
}
' |
	grep -E '.' >&2 && return 1
	return 0
}

check_midline_tab()
{
	find_source_files |
		xargs grep -E -n -e '[^'"$(printf '\t')"'#*]'"$(printf '\t')" |
		grep -v -F -e "$(printf '\t')"'\' |
		grep -v -E -e '://' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Tabs can only be present at beginning of line,' |
		grep -E '.' >&2 && return 1
	return 0
}

check_manpage_tab()
{
	grep -F -n -e "$(printf '\t')" man/stu.1.in && {
		echo >&2 "*** 'man/stu.1.in' must not contain tabs"
		return 1
	}
	return 0
}

check_backtick()
{
	find_source_files |
		grep -v -E -e '/(stu\.1\.in|CODING|COPYING|CHARACTERS|test_clean|MANPAGE|.*\.cc)$' |
		xargs grep -E -n -e '`' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 File must not contain backtick "`",' |
		grep -E '.' >&2 && return 1
	return 0
}

check_double_slash()
{
	find . -name '*.cc' -o -name '*.hh' |
		xargs grep -E -n '(^|[^:])//' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 C++ source must not contain //,' |
		grep -E '.' >&2 && return 1
	return 0
}

check_double_hash()
{
	find . -type f -a \( -name '*.stu' -o -perm -u+x -o -name Makefile \) \
		-a \! -name '*~' -a \! -path './.git*' -a \! -path './bin/stu.*' \
		-a \! -path './bin/stu' -a \! -path './config*' \
		-a \! -path './build-aux/*' -a \! -path doc/TODO.stu |
		xargs grep -F -n '#''#' &&
	{
		echo >&2 "*** Files must not contain #""#"
		return 1
	}
	return 0
}

check_control()
{
	find_source_files |
		xargs grep -E -n -e '['"$(printf '\r')"']' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 File must not contain control character,' |
		grep -E '.' >&2 && return 1
	return 0
}

check_assert_false()
{
	grep -F -n 'assert(false)' src/*.cc src/*.hh |
	sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 C++ source must use hints.hh instead of assert(false),' |
	grep -E '.' >&2 && return 1
	return 0
}

check_test_nolong_sleep()
{
	find tests -type f | xargs grep -F -n -e sleep |
		grep -v -E -e '^tests/long-' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Only tests whose name starts with "long-" may use "sleep",' |
		grep -E '.' >&2 && return 1
	return 0
}

check_preload()
{
	find tests -name PRELOAD.cc |
	while IFS= read -r filename ; do
		grep -q -F -e 'extern "C"' -- "$filename" || {
			echo >&2 "$filename:1:  Preload files must contain 'extern \"C\"'"
			return 1
		}
	done
	return 0
}

ret=0

check_test_own_name || ret=1
check_newline_eof || ret=1
check_space_file || ret=1
check_space_line || ret=1
check_double_empty_line || ret=1
check_midline_tab || ret=1
check_manpage_tab || ret=1
check_backtick || ret=1
check_double_slash || ret=1
check_double_hash || ret=1
check_control || ret=1
check_assert_false || ret=1
check_test_nolong_sleep || ret=1
check_preload || ret=1

[ -e "$error_file" ] && ret=1
exit "$ret"
