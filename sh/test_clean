#! /bin/sh

find_files()
{
	find . -type f |
		grep -v -E -e '~$' -e '^\./(bin|tests|cov|.git)/' -e '^\./man/stu\.1$'
	find tests -name EXEC
}

find_double_slash()
{
	grep -E -n '(^|[^:])//' src/*.cc src/*.hh |
	sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 C++ source must not contain //,' |
	grep -E '.' >&2 && return 1
	return 0
}

find_double_hash()
{
	find . -type f -a \( -name '*.stu' -o -perm -u+x -o -name Makefile \) -a \! -name '*~' \
	     -a \! -path './.git*' -a \! -path './bin/stu.*' -a \! -path './bin/stu' \
	     -a \! -path './config*' -a \! -path './build-aux/*' -a \! -path devel/TODO.stu |
		xargs grep -F -n '#''#' && {
		echo >&2 "*** Shell scripts, makefiles and Stu scripts must not contain #""#"
		return 1
	}
	return 0
}

find_space_file()
{
	find_files | {
		my_ret=0
		while read file ; do
			head -n 1 -- "$file" | grep -q -E '^\s*$' && {
				echo >&2 "$file:1: File must not begin with empty line"
				my_ret=1
			}
			tail -n 1 -- "$file" | grep -q -E '^\s*$' && {
				echo >&2 "$file:$(echo $(wc -l <"$file")): File must not end with empty line"
				my_ret=1
			}
		done
		return "$my_ret"
	}
}

find_space_line()
{
	find_files |
	xargs grep -E -n '\s$' |
	sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Line must not end in space,' |
	grep -E '.' >&2 && return 1
	return 0
}

find_double_empty_line()
{
	find_files |
	xargs awk '
BEGIN {
	previ= "x";
}
/^$/ {
	if (previ == "") {
		print FILENAME ":" (FNR-1) ": Multiple empty lines should not be present";
	};
	previ= "";
}
/./ {
	previ= "x";
}
' |
	grep -E '.' >&2 && return 1
	return 0
}

find_forbidden_tab()
{
	find_files |
		xargs grep -E -n -e '[^'"$(printf '\t')"'#*]'"$(printf '\t')" |
		grep -v -F -e "$(printf '\t')"'\' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Tabs can only be present at beginning of line,' |
		grep -E '.' >&2 && return 1
	return 0
}

find_backtick()
{
	find_files |
		grep -v -E -e '/(stu\.1\.in|CODING|COPYING|CHARACTERS|test_clean|MANPAGE|.*\.cc)$' |
		xargs grep -E -n -e '`' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 File must not contain backtick "`",' |
		grep -E '.' >&2 && return 1
	return 0
}

find_control()
{
	find_files |
		xargs grep -E -n -e '['"$(printf '\r')"']' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 File must not contain control character,' |
		grep -E '.' >&2 && return 1
	return 0
}

find_assert_false()
{
	grep -F -n 'assert(false)' src/*.cc src/*.hh |
	sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 C++ source must use hints.hh instead of assert(false),' |
	grep -E '.' >&2 && return 1
	return 0
}

# Check that we don't use sed with the -E or -r option.  '-r' is a GNU extension
# that enabled extended regular expressions.  POSIX does not prescribe an
# "extended regexp" mode for sed.  In many implementations, '-E' does the same.
# '-E' is more portable than '-r', but still not POSIX.
find_sed()
{
	find . -type f -a \! -path './.git*' -a \! -name '*~' |
		xargs grep -n -E -e 'sed[[:space:]]+-[Er]' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 '"'sed ""-E' and 'sed ""-r' must not be used"',' |
	grep -E '.' >&2 && return 1
	return 0
}

find_test_nolong_sleep()
{
	find tests -type f | xargs grep -F -n -e sleep |
		grep -v -E -e '^tests/long-' |
		sed -e 's,^\([^:]*:[0-9]*:\).*$,\1 Only tests whose name starts with "long-" may use "sleep",' |
		grep -E '.' >&2 && return 1
	return 0
}

find_manpage_tab()
{
	grep -F -n -e "$(printf '\t')" man/stu.1.in && {
		echo >&2 "*** 'man/stu.1.in' must not contain tabs"
		return 1
	}
	return 0
}

ret=0

find_double_slash || ret=1
find_double_hash || ret=1
find_space_file || ret=1
find_space_line || ret=1
find_double_empty_line || ret=1
find_forbidden_tab || ret=1
find_backtick || ret=1
find_control || ret=1
find_assert_false || ret=1
find_sed || ret=1
find_test_nolong_sleep || ret=1
find_manpage_tab || ret=1

exit "$ret"
