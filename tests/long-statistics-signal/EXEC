#! /bin/sh

kill_sleeps()
{
	for pid in $(ps -fA | grep 31415926535 | grep -v grep | sed -e 's/^[^[:space:]]\{1,\}[[:space:]]\{1,\}\([0-9]\{1,\}\)[[:space:]].*$/\1/') ; do
		echo >&2 "$0:  *** Killing PID '$pid'"
		kill "$pid"
	done

	count=$(echo $(ps -fA | grep 31415926535 | grep -v grep | wc -l))
	[ "$count" = 0 ] || {
		echo >&2 '*** Could not kill all processes'
		echo >&2 "count='$count'"
		echo >&2 'Still running:'
		ps -fA | grep 31415926535 | grep -v grep
		exit 1
	}
}

rm -f ? || exit 2

kill_sleeps

echo '../../bin/stu.test -z >list.out 2>list.err &'
../../bin/stu.test -z >list.out 2>list.err &
pid=$!

# Make sure the target 'X' is finished
echo sleep 1
sleep 1 || exit 2

kill -TERM "$pid" || exit 2

# Give Stu time to kill all processes
echo sleep 1
sleep 1 || exit 2

# Make sure no process is still running
if [ "$(echo $(ps -fA | grep 31415926535 | grep -v grep | wc -l))" != 0 ]; then
	echo >&2 "$0:  *** There is still a process running:"
	ps -fA | grep 31415926535 | grep -v grep >&2
	exit 1
fi

# Check that statistics are not output

grep -qF 'STATISTICS' list.out && {
	echo >&2 '*** Number of jobs started'
	echo >&2 stdout:
	echo >&2 ____
	cat >&2 list.out
	echo >&2 ____
	exit 1
}

grep -qF 'STATISTICS' list.err && {
	echo >&2 '*** Number of jobs started'
	echo >&2 stderr:
	echo >&2 ____
	cat >&2 list.err
	echo >&2 ____
	exit 1
}

kill_sleeps

exit 0
