#! /bin/sh

#
# Each line ultimately has C being a dependency of A.
#

err() {
	echo >&2 "line_number=$line_number stucode=⟨$stucode⟩ a_exists=$a_exists"
	echo >&2 "*** $1"
	echo >&2 stdout:
	cat  >&2 list.out
	echo >&2 _______
	echo >&2 stderr:
	cat  >&2 list.err
	echo >&2 _______
	stat=1
}

clean() {
	rm -f -- "$error_file"
}

count_total=0
count_error=0
line_number=0
error_file=${TMP:-/tmp}/stu-long-trivial.$$
echo 0 >"$error_file"
trap clean EXIT INT QUIT TERM ABRT HUP
clean || exit 2

cat list | while IFS= read -r line ; do
	: $(( line_number += 1 ))
	printf '%s\n' "$line" | grep -q -E -e '^[[:space:]]*($|#)' && continue
##	: $(( count_total += 1 ))
	for a_exists in yes no ; do
		for x in before after absent ; do
			stucode=$line
			../../sh/rm_tmps || exit 2
			[ $x = before ] && {
				stucode=$(echo "$stucode" | sed -e 's,:,: X ,;s,$, X={x},')
				[ $? = 0 ] || exit 1
			}
			[ $x = after ] && {
				stucode=$(echo "$stucode" | sed -e 's,{, X {,;s,$, X={x},')
				[ $? = 0 ] || exit 1
			}
			if [ $a_exists = yes ] ; then
				echo aaa >A || exit 2
				[ "$x" != absent ] && { echo xxx >X || exit 2 ; }
			else
				stucode="$stucode C={CORRECT}"
			fi
			echo "CASE: line_number=$line_number a_exists=$a_exists x=$x ⟨$stucode⟩"
			printf '%s\n' "$stucode" >list.stu || exit 2
			../../bin/stu.test -f list.stu >list.out 2>list.err
			exitstatus=$?
			echo "	exitstatus=$exitstatus"
			stat=0
			[ $exitstatus = 0 ] ||
				err "Expected exit status 0, not $exitstatus"
			if [ $a_exists = yes ] ; then
				[ -e C ] &&
					err "C must not exist"
			else
				[ -r C ] ||
					err "C must be created"
				grep -q -F -e CORRECT C ||
					err "C must contain 'CORRECT'"
			fi
			echo "$stat" >>"$error_file"
			echo "	stat=$stat"
		done
	done
done

../../sh/rm_tmps
count_total=$(echo $(wc -l <"$error_file"))
count_error=$(echo $(grep -F -e 0 "$error_file" | wc -l))
echo "$0: Success rate = $count_error/$count_total"

if grep -q -F -e 1 "$error_file" ; then
	exit 1
else
	exit 0
fi
