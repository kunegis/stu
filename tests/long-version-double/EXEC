#! /bin/sh
#
# It is possible to have multiple version statements, in particular in
# different source files.
#

STUFILE1=tmp1.stu
STUFILE2=tmp2.stu

error=0

# Arguments:
#   $1   Correct exit status
#   $2   Version in %version statement of file 1
#   $3   Version in %version statement of file 2
do_test()
{
	exitstatus_correct="$1"
	version1="$2"
	version2="$3"

	echo "$0:  TESTING $1 $2 $3"

	rm -f $STUFILE1 $STUFILE2 A list.err

	cat >$STUFILE1 <<EOF
%version $version1
A: B { cp B A }
%include $STUFILE2
EOF

	cat >$STUFILE2 <<EOF
%version $version2
B { echo CORRECT >B }
EOF

	../../bin/stu.test -f $STUFILE1 2>list.err
	exitstatus_actual=$?
	echo "   exitstatus=$exitstatus_actual"
	if [ "$exitstatus_actual" != "$exitstatus_correct" ] ; then
		echo >&2 "*** $0:  Error in case $1 $2"
		error=1
	fi

	if [ "$exitstatus_correct" = 0 ] ; then
		if ! grep -qF CORRECT A ; then
			echo >&2 "*** $0:  Incorrect content of file 'A'"
			error=1
		fi
	else
		if ! grep -qF 'is incompatible with' list.err ; then
			echo >&2 "*** $0:  Invalid error output"
			error=1
		fi
	fi
}

# This code is identical to what ./mkversion does
VERSION=$(echo $(cat ../../VERSION))
echo "VERSION='$VERSION'"

if echo "$VERSION" | grep -qEv '[0-9]+\.[0-9]+\.[0-9]+' ; then
	echo >&2 "*** $0: Invalid version number '$VERSION'"
	exit 1
fi

MAJOR=$(echo "$VERSION" | sed -e 's/^\([0-9]\{1,\}\)\.[0-9]\{1,\}\.[0-9]\{1,\}$/\1/')
MINOR=$(echo "$VERSION" | sed -e 's/^[0-9]\{1,\}\.\([0-9]\{1,\}\)\.[0-9]\{1,\}$/\1/')
PATCH=$(echo "$VERSION" | sed -e 's/^[0-9]\{1,\}\.[0-9]\{1,\}\.\([0-9]\{1,\}\)$/\1/')

echo "MAJOR='$MAJOR'"
echo "MINOR='$MINOR'"
echo "PATCH='$PATCH'"

MAJOR_INC=$(($MAJOR + 1))
MAJOR_DEC=$(($MAJOR - 1))
MINOR_INC=$(($MINOR + 1))
MINOR_DEC=$(($MINOR - 1))
PATCH_INC=$(($PATCH + 1))
PATCH_DEC=$(($PATCH - 1))

list="$MAJOR_INC.0 $MAJOR.$MINOR_INC $MAJOR.$MINOR_INC.0 $MAJOR.$MINOR.$PATCH_INC $MAJOR.$MINOR.$PATCH"
list_error="2 2 2 2 0"

if [ $(( MAJOR > 0 )) = 1 ] ; then
	list="$list $MAJOR_DEC.0 $MAJOR_DEC.0.0"
	list_error="$list_error 2 2"
fi

if [ $(( MINOR > 0 )) = 1 ] ; then
	list="$list $MAJOR.$MINOR_DEC $MAJOR.$MINOR_DEC.99999"
	list_error="$list_error 0 0"
fi

if [ $(( PATCH > 0 )) = 1 ] ; then
	list="$list $MAJOR.$MINOR.$PATCH_DEC"
	list_error="$list_error 0"
fi

n=$(echo $list | wc -w)

for i in $(../../sh/seq $n) ; do
	for j in $(../../sh/seq $n) ; do
		v1=$(echo $list | cut -d ' ' -f $i)
		v2=$(echo $list | cut -d ' ' -f $j)
		ret1=$(echo $list_error | cut -d ' ' -f $i)
		ret2=$(echo $list_error | cut -d ' ' -f $j)
		ret=$(expr $ret1 '|' $ret2)
		do_test $ret $v1 $v2
	done
done

rm -f $STUFILE1 $STUFILE2 A list.err

exit $error
